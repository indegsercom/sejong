"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Book implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  cover: String
  excerpt: String
  authors: [String]!
  publishedYear: Int!
  createdAt: Datetime
  modifiedAt: Datetime
  citation: String
}

"""
A condition to be used against `Book` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BookCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `modifiedAt` field."""
  modifiedAt: Datetime
}

"""An input for mutations affecting `Book`"""
input BookInput {
  id: UUID
  title: String!
  cover: String
  excerpt: String
  authors: [String]!
  publishedYear: Int!
  createdAt: Datetime
  modifiedAt: Datetime
}

"""Represents an update to a `Book`. Fields that are set will be updated."""
input BookPatch {
  id: UUID
  title: String
  cover: String
  excerpt: String
  authors: [String]
  publishedYear: Int
  createdAt: Datetime
  modifiedAt: Datetime
}

"""A connection to a list of `Book` values."""
type BooksConnection {
  """A list of `Book` objects."""
  nodes: [Book!]!

  """
  A list of edges which contains the `Book` and cursor to aid in pagination.
  """
  edges: [BooksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Book` you could get from the connection."""
  totalCount: Int!
}

"""A `Book` edge in the connection."""
type BooksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Book` at the end of the edge."""
  node: Book!
}

"""Methods to use when ordering `Book`."""
enum BooksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MODIFIED_AT_ASC
  MODIFIED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Choseh implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  edition: Int
}

"""
A condition to be used against `Choseh` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChosehCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}

"""An input for mutations affecting `Choseh`"""
input ChosehInput {
  id: String!
  edition: Int
}

"""
Represents an update to a `Choseh`. Fields that are set will be updated.
"""
input ChosehPatch {
  id: String
  edition: Int
}

"""A connection to a list of `Choseh` values."""
type ChosehsConnection {
  """A list of `Choseh` objects."""
  nodes: [Choseh!]!

  """
  A list of edges which contains the `Choseh` and cursor to aid in pagination.
  """
  edges: [ChosehsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Choseh` you could get from the connection."""
  totalCount: Int!
}

"""A `Choseh` edge in the connection."""
type ChosehsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Choseh` at the end of the edge."""
  node: Choseh!
}

"""Methods to use when ordering `Choseh`."""
enum ChosehsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Book` mutation."""
input CreateBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Book` to be created by this mutation."""
  book: BookInput!
}

"""The output of our create `Book` mutation."""
type CreateBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was created by this mutation."""
  book: Book

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the create `Choseh` mutation."""
input CreateChosehInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Choseh` to be created by this mutation."""
  choseh: ChosehInput!
}

"""The output of our create `Choseh` mutation."""
type CreateChosehPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Choseh` that was created by this mutation."""
  choseh: Choseh

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Choseh`. May be used by Relay 1."""
  chosehEdge(
    """The method to use when ordering `Choseh`."""
    orderBy: [ChosehsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChosehsEdge
}

"""All input for the create `History` mutation."""
input CreateHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `History` to be created by this mutation."""
  history: HistoryInput!
}

"""The output of our create `History` mutation."""
type CreateHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `History` that was created by this mutation."""
  history: History

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `History`. May be used by Relay 1."""
  historyEdge(
    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HistoriesEdge
}

"""All input for the create `Migration` mutation."""
input CreateMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Migration` to be created by this mutation."""
  migration: MigrationInput!
}

"""The output of our create `Migration` mutation."""
type CreateMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was created by this mutation."""
  migration: Migration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the create `Movie` mutation."""
input CreateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Movie` to be created by this mutation."""
  movie: MovieInput!
}

"""The output of our create `Movie` mutation."""
type CreateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was created by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""All input for the create `Story` mutation."""
input CreateStoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Story` to be created by this mutation."""
  story: StoryInput!
}

"""The output of our create `Story` mutation."""
type CreateStoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Story` that was created by this mutation."""
  story: Story

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Story`. May be used by Relay 1."""
  storyEdge(
    """The method to use when ordering `Story`."""
    orderBy: [StoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoriesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBookByNodeId` mutation."""
input DeleteBookByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Book` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBook` mutation."""
input DeleteBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Book` mutation."""
type DeleteBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was deleted by this mutation."""
  book: Book
  deletedBookNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the `deleteChosehByNodeId` mutation."""
input DeleteChosehByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Choseh` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChoseh` mutation."""
input DeleteChosehInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Choseh` mutation."""
type DeleteChosehPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Choseh` that was deleted by this mutation."""
  choseh: Choseh
  deletedChosehNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Choseh`. May be used by Relay 1."""
  chosehEdge(
    """The method to use when ordering `Choseh`."""
    orderBy: [ChosehsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChosehsEdge
}

"""All input for the `deleteHistoryByLink` mutation."""
input DeleteHistoryByLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  link: String!
}

"""All input for the `deleteHistoryByNodeId` mutation."""
input DeleteHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `History` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHistory` mutation."""
input DeleteHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `History` mutation."""
type DeleteHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `History` that was deleted by this mutation."""
  history: History
  deletedHistoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `History`. May be used by Relay 1."""
  historyEdge(
    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HistoriesEdge
}

"""All input for the `deleteMigrationByNodeId` mutation."""
input DeleteMigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Migration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMigration` mutation."""
input DeleteMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Migration` mutation."""
type DeleteMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was deleted by this mutation."""
  migration: Migration
  deletedMigrationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the `deleteMovieByNodeId` mutation."""
input DeleteMovieByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Movie` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMovie` mutation."""
input DeleteMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Movie` mutation."""
type DeleteMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was deleted by this mutation."""
  movie: Movie
  deletedMovieNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""All input for the `deleteStoryByNodeId` mutation."""
input DeleteStoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Story` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStory` mutation."""
input DeleteStoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Story` mutation."""
type DeleteStoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Story` that was deleted by this mutation."""
  story: Story
  deletedStoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Story`. May be used by Relay 1."""
  storyEdge(
    """The method to use when ordering `Story`."""
    orderBy: [StoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoriesEdge
}

"""A connection to a list of `History` values."""
type HistoriesConnection {
  """A list of `History` objects."""
  nodes: [History!]!

  """
  A list of edges which contains the `History` and cursor to aid in pagination.
  """
  edges: [HistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `History` you could get from the connection."""
  totalCount: Int!
}

"""A `History` edge in the connection."""
type HistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `History` at the end of the edge."""
  node: History!
}

"""Methods to use when ordering `History`."""
enum HistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LINK_ASC
  LINK_DESC
  MODIFIED_AT_ASC
  MODIFIED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type History implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  link: String!
  title: String!
  cover: String
  excerpt: String
  comment: String
  createdAt: Datetime
  modifiedAt: Datetime
}

"""
A condition to be used against `History` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input HistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `link` field."""
  link: String

  """Checks for equality with the object’s `modifiedAt` field."""
  modifiedAt: Datetime
}

"""An input for mutations affecting `History`"""
input HistoryInput {
  id: UUID
  link: String!
  title: String!
  cover: String
  excerpt: String
  comment: String
  createdAt: Datetime
  modifiedAt: Datetime
}

"""
Represents an update to a `History`. Fields that are set will be updated.
"""
input HistoryPatch {
  id: UUID
  link: String
  title: String
  cover: String
  excerpt: String
  comment: String
  createdAt: Datetime
  modifiedAt: Datetime
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

type Migration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  runOn: Datetime!
}

"""
A condition to be used against `Migration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `Migration`"""
input MigrationInput {
  id: Int
  name: String!
  runOn: Datetime!
}

"""
Represents an update to a `Migration`. Fields that are set will be updated.
"""
input MigrationPatch {
  id: Int
  name: String
  runOn: Datetime
}

"""A connection to a list of `Migration` values."""
type MigrationsConnection {
  """A list of `Migration` objects."""
  nodes: [Migration!]!

  """
  A list of edges which contains the `Migration` and cursor to aid in pagination.
  """
  edges: [MigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Migration` you could get from the connection."""
  totalCount: Int!
}

"""A `Migration` edge in the connection."""
type MigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Migration` at the end of the edge."""
  node: Migration!
}

"""Methods to use when ordering `Migration`."""
enum MigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Movie implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  cover: String
  trailerUrl: String
  directors: [String]!
  actors: [String]!
  publishedYear: Int!
  createdAt: Datetime
  modifiedAt: Datetime
}

"""
A condition to be used against `Movie` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MovieCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""An input for mutations affecting `Movie`"""
input MovieInput {
  id: UUID
  title: String!
  cover: String
  trailerUrl: String
  directors: [String]!
  actors: [String]!
  publishedYear: Int!
  createdAt: Datetime
  modifiedAt: Datetime
}

"""
Represents an update to a `Movie`. Fields that are set will be updated.
"""
input MoviePatch {
  id: UUID
  title: String
  cover: String
  trailerUrl: String
  directors: [String]
  actors: [String]
  publishedYear: Int
  createdAt: Datetime
  modifiedAt: Datetime
}

"""A connection to a list of `Movie` values."""
type MoviesConnection {
  """A list of `Movie` objects."""
  nodes: [Movie!]!

  """
  A list of edges which contains the `Movie` and cursor to aid in pagination.
  """
  edges: [MoviesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Movie` you could get from the connection."""
  totalCount: Int!
}

"""A `Movie` edge in the connection."""
type MoviesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Movie` at the end of the edge."""
  node: Movie!
}

"""Methods to use when ordering `Movie`."""
enum MoviesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Book`."""
  createBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookInput!
  ): CreateBookPayload

  """Creates a single `Choseh`."""
  createChoseh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChosehInput!
  ): CreateChosehPayload

  """Creates a single `History`."""
  createHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryInput!
  ): CreateHistoryPayload

  """Creates a single `Migration`."""
  createMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMigrationInput!
  ): CreateMigrationPayload

  """Creates a single `Movie`."""
  createMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMovieInput!
  ): CreateMoviePayload

  """Creates a single `Story`."""
  createStory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStoryInput!
  ): CreateStoryPayload

  """Updates a single `Book` using its globally unique id and a patch."""
  updateBookByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookByNodeIdInput!
  ): UpdateBookPayload

  """Updates a single `Book` using a unique key and a patch."""
  updateBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookInput!
  ): UpdateBookPayload

  """Updates a single `Choseh` using its globally unique id and a patch."""
  updateChosehByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChosehByNodeIdInput!
  ): UpdateChosehPayload

  """Updates a single `Choseh` using a unique key and a patch."""
  updateChoseh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChosehInput!
  ): UpdateChosehPayload

  """Updates a single `History` using its globally unique id and a patch."""
  updateHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHistoryByNodeIdInput!
  ): UpdateHistoryPayload

  """Updates a single `History` using a unique key and a patch."""
  updateHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHistoryInput!
  ): UpdateHistoryPayload

  """Updates a single `History` using a unique key and a patch."""
  updateHistoryByLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHistoryByLinkInput!
  ): UpdateHistoryPayload

  """Updates a single `Migration` using its globally unique id and a patch."""
  updateMigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMigrationByNodeIdInput!
  ): UpdateMigrationPayload

  """Updates a single `Migration` using a unique key and a patch."""
  updateMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMigrationInput!
  ): UpdateMigrationPayload

  """Updates a single `Movie` using its globally unique id and a patch."""
  updateMovieByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieByNodeIdInput!
  ): UpdateMoviePayload

  """Updates a single `Movie` using a unique key and a patch."""
  updateMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieInput!
  ): UpdateMoviePayload

  """Updates a single `Story` using its globally unique id and a patch."""
  updateStoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoryByNodeIdInput!
  ): UpdateStoryPayload

  """Updates a single `Story` using a unique key and a patch."""
  updateStory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoryInput!
  ): UpdateStoryPayload

  """Deletes a single `Book` using its globally unique id."""
  deleteBookByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookByNodeIdInput!
  ): DeleteBookPayload

  """Deletes a single `Book` using a unique key."""
  deleteBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookInput!
  ): DeleteBookPayload

  """Deletes a single `Choseh` using its globally unique id."""
  deleteChosehByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChosehByNodeIdInput!
  ): DeleteChosehPayload

  """Deletes a single `Choseh` using a unique key."""
  deleteChoseh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChosehInput!
  ): DeleteChosehPayload

  """Deletes a single `History` using its globally unique id."""
  deleteHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHistoryByNodeIdInput!
  ): DeleteHistoryPayload

  """Deletes a single `History` using a unique key."""
  deleteHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHistoryInput!
  ): DeleteHistoryPayload

  """Deletes a single `History` using a unique key."""
  deleteHistoryByLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHistoryByLinkInput!
  ): DeleteHistoryPayload

  """Deletes a single `Migration` using its globally unique id."""
  deleteMigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMigrationByNodeIdInput!
  ): DeleteMigrationPayload

  """Deletes a single `Migration` using a unique key."""
  deleteMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMigrationInput!
  ): DeleteMigrationPayload

  """Deletes a single `Movie` using its globally unique id."""
  deleteMovieByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieByNodeIdInput!
  ): DeleteMoviePayload

  """Deletes a single `Movie` using a unique key."""
  deleteMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieInput!
  ): DeleteMoviePayload

  """Deletes a single `Story` using its globally unique id."""
  deleteStoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoryByNodeIdInput!
  ): DeleteStoryPayload

  """Deletes a single `Story` using a unique key."""
  deleteStory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoryInput!
  ): DeleteStoryPayload
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Book`."""
  books(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookCondition
  ): BooksConnection

  """Reads and enables pagination through a set of `Choseh`."""
  chosehs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Choseh`."""
    orderBy: [ChosehsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChosehCondition
  ): ChosehsConnection

  """Reads and enables pagination through a set of `History`."""
  histories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryCondition
  ): HistoriesConnection

  """Reads and enables pagination through a set of `Migration`."""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition
  ): MigrationsConnection

  """Reads and enables pagination through a set of `Movie`."""
  movies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MovieCondition
  ): MoviesConnection

  """Reads and enables pagination through a set of `Story`."""
  stories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Story`."""
    orderBy: [StoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoryCondition
  ): StoriesConnection
  book(id: UUID!): Book
  choseh(id: String!): Choseh
  history(id: UUID!): History
  historyByLink(link: String!): History
  migration(id: Int!): Migration
  movie(id: UUID!): Movie
  story(id: UUID!): Story

  """Reads a single `Book` using its globally unique `ID`."""
  bookByNodeId(
    """The globally unique `ID` to be used in selecting a single `Book`."""
    nodeId: ID!
  ): Book

  """Reads a single `Choseh` using its globally unique `ID`."""
  chosehByNodeId(
    """The globally unique `ID` to be used in selecting a single `Choseh`."""
    nodeId: ID!
  ): Choseh

  """Reads a single `History` using its globally unique `ID`."""
  historyByNodeId(
    """The globally unique `ID` to be used in selecting a single `History`."""
    nodeId: ID!
  ): History

  """Reads a single `Migration` using its globally unique `ID`."""
  migrationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Migration`."""
    nodeId: ID!
  ): Migration

  """Reads a single `Movie` using its globally unique `ID`."""
  movieByNodeId(
    """The globally unique `ID` to be used in selecting a single `Movie`."""
    nodeId: ID!
  ): Movie

  """Reads a single `Story` using its globally unique `ID`."""
  storyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Story`."""
    nodeId: ID!
  ): Story
}

"""A connection to a list of `Story` values."""
type StoriesConnection {
  """A list of `Story` objects."""
  nodes: [Story!]!

  """
  A list of edges which contains the `Story` and cursor to aid in pagination.
  """
  edges: [StoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Story` you could get from the connection."""
  totalCount: Int!
}

"""A `Story` edge in the connection."""
type StoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Story` at the end of the edge."""
  node: Story!
}

"""Methods to use when ordering `Story`."""
enum StoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Story implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  excerpt: String
  createdAt: Datetime
  modifiedAt: Datetime
  cover: String
}

"""
A condition to be used against `Story` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""An input for mutations affecting `Story`"""
input StoryInput {
  id: UUID
  title: String!
  excerpt: String
  createdAt: Datetime
  modifiedAt: Datetime
  cover: String
}

"""
Represents an update to a `Story`. Fields that are set will be updated.
"""
input StoryPatch {
  id: UUID
  title: String
  excerpt: String
  createdAt: Datetime
  modifiedAt: Datetime
  cover: String
}

"""All input for the `updateBookByNodeId` mutation."""
input UpdateBookByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Book` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Book` being updated.
  """
  patch: BookPatch!
}

"""All input for the `updateBook` mutation."""
input UpdateBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Book` being updated.
  """
  patch: BookPatch!
  id: UUID!
}

"""The output of our update `Book` mutation."""
type UpdateBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was updated by this mutation."""
  book: Book

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the `updateChosehByNodeId` mutation."""
input UpdateChosehByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Choseh` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Choseh` being updated.
  """
  patch: ChosehPatch!
}

"""All input for the `updateChoseh` mutation."""
input UpdateChosehInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Choseh` being updated.
  """
  patch: ChosehPatch!
  id: String!
}

"""The output of our update `Choseh` mutation."""
type UpdateChosehPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Choseh` that was updated by this mutation."""
  choseh: Choseh

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Choseh`. May be used by Relay 1."""
  chosehEdge(
    """The method to use when ordering `Choseh`."""
    orderBy: [ChosehsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChosehsEdge
}

"""All input for the `updateHistoryByLink` mutation."""
input UpdateHistoryByLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `History` being updated.
  """
  patch: HistoryPatch!
  link: String!
}

"""All input for the `updateHistoryByNodeId` mutation."""
input UpdateHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `History` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `History` being updated.
  """
  patch: HistoryPatch!
}

"""All input for the `updateHistory` mutation."""
input UpdateHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `History` being updated.
  """
  patch: HistoryPatch!
  id: UUID!
}

"""The output of our update `History` mutation."""
type UpdateHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `History` that was updated by this mutation."""
  history: History

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `History`. May be used by Relay 1."""
  historyEdge(
    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HistoriesEdge
}

"""All input for the `updateMigrationByNodeId` mutation."""
input UpdateMigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Migration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Migration` being updated.
  """
  patch: MigrationPatch!
}

"""All input for the `updateMigration` mutation."""
input UpdateMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Migration` being updated.
  """
  patch: MigrationPatch!
  id: Int!
}

"""The output of our update `Migration` mutation."""
type UpdateMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was updated by this mutation."""
  migration: Migration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the `updateMovieByNodeId` mutation."""
input UpdateMovieByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Movie` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
}

"""All input for the `updateMovie` mutation."""
input UpdateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
  id: UUID!
}

"""The output of our update `Movie` mutation."""
type UpdateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was updated by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""All input for the `updateStoryByNodeId` mutation."""
input UpdateStoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Story` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Story` being updated.
  """
  patch: StoryPatch!
}

"""All input for the `updateStory` mutation."""
input UpdateStoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Story` being updated.
  """
  patch: StoryPatch!
  id: UUID!
}

"""The output of our update `Story` mutation."""
type UpdateStoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Story` that was updated by this mutation."""
  story: Story

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Story`. May be used by Relay 1."""
  storyEdge(
    """The method to use when ordering `Story`."""
    orderBy: [StoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoriesEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
